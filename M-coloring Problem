class Solution{
    bool issafe(int node, int color[], bool graph[101][101], int N, int col){
        for(int k=0;k<N;k++){
            if(k!=node && graph[k][node]==1 && color[k]==col){
                return false;
            }
        }
        return true;
    }
    bool solve(int node, int color[], bool graph[101][101], int m, int N){
        if(node==N){
            return true;
        }
        for(int i=1;i<=m;i++){
            if(issafe(node, color, graph, N, i)){
                color[node]=i;
                if(solve(node+1, color, graph, m, N)){
                    return true;
                }
                color[node]=0;
            }
        }
        return false;
    }
public:
    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
    bool graphColoring(bool graph[101][101], int m, int n) {
        // your code here
        int color[n]={0};
        if(solve(0, color, graph, m, n)){
            return true;
        }
        return false;
    }
