class Solution {
public:
bool issafe(int row, int col, vector<string> &board, int n){
    
    for(int i=row,j=col;j>=0;j--){
        if(board[i][j]=='Q')
        return false;
    }
    for(int i=row,j=col;i>=0 && j>=0;i--,j--){
        if(board[i][j]=='Q')
        return false;
    }
    for(int i=row,j=col;i<n && j>=0;i++,j--){
        if(board[i][j]=='Q')
        return false;
    }
    // int i=row;
    // int j=col;
    // while(row>=0 && col>=0){
    //     if(board[row][col]=='Q'){
    //         return false;
    //     }
    //     row--;
    //     col--;
    // }
    // row=i;
    // col=j;
    // while(row>=0 && col>=0){
    //     if(board[row][col]=='Q'){
    //         return false;
    //     }
    //     row--;
    //     col--;
    // }
    return true;
}
    void solve(int col, vector<string>& board, vector<vector<string>> &ans, int n){
        if(col==n){
            ans.push_back(board);
            return;
        }
        for(int i=0;i<n;i++){
            if(issafe(i, col, board, n)){
                board[i][col]='Q';
                solve(col+1, board, ans, n);
                board[i][col]='.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n, string(n, '.'));
        
        
        solve(0, board, ans, n);
        return ans;
    }
};
